{"version":3,"sources":["components/InputBar.js","components/DevCardList.js","components/PopularRepo.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["InputBar","state","link","handleChange","e","setState","target","value","handleSubmit","preventDefault","inputdata","dotComPosition","indexOf","userData","slice","console","log","axios","get","then","res","props","getJsonData","data","setTitle","className","onSubmit","this","autoComplete","id","placeholder","onChange","htmlFor","React","Component","DevCardList","jsonData","devList","length","map","key","login","src","avatar_url","alt","width","rel","href","contributions","PopularRepo","popularRepoData","name","onClick","user","About","role","aria-label","App","title","newTitle","split","text","charAt","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0bfb4906.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_URL_START = 'https://api.github.com/repos/';\r\nconst API_URL_END = '/contributors';\r\n\r\nclass InputBar extends React.Component{\r\n\r\n    state = {\r\n        link: ''\r\n    }\r\n\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            link: e.target.value\r\n        });\r\n    }\r\n\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let inputdata = this.state.link;\r\n        let dotComPosition = inputdata.indexOf(\".com\")+5;\r\n        let userData = inputdata.slice(dotComPosition);\r\n        console.log(userData);\r\n        \r\n\r\n        axios.get(`${API_URL_START}${userData}${API_URL_END}`).then(res => {\r\n            this.props.getJsonData(res.data);\r\n            this.props.setTitle(`${userData}`);\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <form className=\"col s12\" onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <i className=\"material-icons prefix\">search</i>\r\n                            <input id=\"searchBox\" className=\"validate\" placeholder=\"Paste the Repo Link\" onChange={this.handleChange}></input>\r\n                            <label htmlFor=\"searchBox\" className=\"active\">Search</label>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n          \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default InputBar;","import React from 'react';\r\n\r\nconst DevCardList = ({jsonData}) => {\r\n\r\n    const devList = jsonData.length ? jsonData.map( data => {\r\n        return(\r\n            <div className=\"row\" id=\"dev-card\" key={data.login}>\r\n                <div className=\"col\">\r\n                    <div className=\"card\" id=\"dev-card-main\">\r\n                        <div className=\"card-image\">\r\n                             <img src={data.avatar_url} alt=\"avatar\" width='256px'/>\r\n                             <span className=\"card-title\">{data.login}</span>\r\n                             <a className=\"btn-floating  halfway-fab waves-effect waves-light red scale-transition\" target=\"_blank\" rel=\"noopener noreferrer\" href={'https://github.com/' + data.login}><i className=\"material-icons\">launch</i></a>\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            <p>Contributions : {data.contributions}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }) : <p>No Data now</p>\r\n\r\n    return(\r\n        <div>\r\n            {devList}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DevCardList;","import React from 'react';\r\nimport data from '../repo-data/repo.json';\r\nimport axios from 'axios';\r\n\r\nconst API_URL_START = 'https://api.github.com/repos/';\r\nconst API_URL_END = '/contributors';\r\n\r\nconst PopularRepo = (props) => {\r\n    const popularRepoData = data.map(data => {\r\n\r\n        return(\r\n            <div className=\"row\" id=\"dev-card\" key = {data.link}>\r\n                <div className=\"col\">\r\n                    <div className=\"card\" id=\"dev-card-main\">\r\n                        <div className=\"card-image\">\r\n                             <img src={data.avatar_url} alt=\"avatar\" width='256px'/>\r\n                             <span className=\"card-title\">{data.name}</span>\r\n                            <a className=\"btn-floating  halfway-fab waves-effect waves-light red scale-transition\" href=\"#root\" onClick={(e) => {\r\n                                let inputdata = data.link;\r\n                                let dotComPosition = inputdata.indexOf(\".com\")+5;\r\n                                let userData = inputdata.slice(dotComPosition);\r\n                                axios.get(`${API_URL_START}${userData}${API_URL_END}`).then(res => {\r\n                                    props.getJsonData(res.data);\r\n                                    props.setTitle(`${userData}`);\r\n                                })\r\n                             }}>\r\n                                 <i className=\"material-icons\">eject</i></a>\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            <p>Creator: {data.user}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return(\r\n        <div>\r\n            {popularRepoData}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default PopularRepo;","import React from 'react'\r\n\r\nclass About extends React.Component{\r\n    render(){\r\n        return(\r\n            <footer className=\"page-footer\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col l6 s12\">\r\n                <h5 className=\"white-text\">About</h5>\r\n                <p className=\"grey-text text-lighten-4\">This project is a small token of appreciation to all the Developers around the world whoes contributions to the open source community have done Marvelous Wonders in the age of the internet. \r\n                Thank You <span role=\"img\" aria-label=\"ThankYou\">üôè</span> to all the Developers out there</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"footer-copyright\">\r\n            <div className=\"container\">\r\n            ¬© 2020 Copyright\r\n            </div>\r\n          </div>\r\n        </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport './App.css';\nimport InputBar from './components/InputBar';\nimport DevCardList from './components/DevCardList';\nimport PopularRepo from './components/PopularRepo';\nimport About from './components/About';\n\nclass App extends React.Component{\n\n  state = {\n    title: 'No',\n    jsonData: {}\n  }\n\n\n  setTitle = (data) => {\n\n    //Transforming the data for the Title\n\n    let newTitle = data.split('/'); //Extracting Repo Name\n    newTitle = newTitle.map(text => {\n      return text.charAt(0).toUpperCase() + text.slice(1);\n    })\n\n    this.setState({\n      title: `Thank You, \"${newTitle[1]} by ${newTitle[0]}\"`\n    });\n  }\n\n  getJsonData = (data) => {\n\n    this.setState({\n      jsonData: data\n    });\n    \n  }\n\n\n  render(){\n    return(\n      <div>\n        <InputBar getJsonData={this.getJsonData} setTitle={this.setTitle}></InputBar>\n        <blockquote>{this.state.title} Contributors:</blockquote>\n        <DevCardList jsonData={this.state.jsonData}></DevCardList>\n        <blockquote>Popular Github Repo:</blockquote>\n        <PopularRepo getJsonData={this.getJsonData} setTitle={this.setTitle}></PopularRepo>\n        <About></About>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}